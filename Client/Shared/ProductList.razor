@inject IProductService productService
@implements IDisposable

@if (productService.Products == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <ul class="list-unstyled">
        @foreach (var product in productService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>
        }
    </ul>
}


@code {
    protected override void OnInitialized()
    {
        productService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        productService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if( variants.Count == 0)
        {
            return "";
        }
        else if (variants.Count == 1)
        {
            return variants.First().Price.ToString("c");
        }
        else 
        {
            return $"Starting at {variants.Min(v => v.Price).ToString("c")}";
        }
    }
}

@inject IProductService ProductService
@implements IDisposable

<center><h2>Top Products of Today</h2></center>
@if(ProductService.Products == null || 0.Equals(ProductService.Products?.Count) )
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container">
        @foreach (var product in ProductService.Products)
        {
            @if(product.Featured)
            {
                <div class="featured-product">
                    <div>
                        <a href="product/@product.Id">
                            <img src="@product.ImageUrl" alt="@product.Title" />
                            </a>
                    </div>
                    <h4><a href="product/@product.Id">@product.Title</a></h4>
                    @if (product.Variants != null && product.Variants.Count > 0)
                    {
                        <h5 class="price">@product.Variants.First().Price.ToString("c")</h5>
                    }
                </div>
            }
        }
    </div>
}

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}

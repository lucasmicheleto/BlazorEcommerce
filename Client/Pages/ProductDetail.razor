@page "/product/{id:int}"
@inject IProductService productService
@if(product != null)
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>
             @if (product.Variants != null && product.Variants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-select" @bind="currentTypeId">
                        @foreach  (var variant in product.Variants)
                        {
                            <option value="@variant.ProductTypeId" >@variant.ProductType?.Name</option>
                        }
                    </select>
                </div>
            } 
             @if (GetSelectedVariant() != null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        @GetSelectedVariant()?.OriginalPrice.ToString("c")
                    </h6>
                }
                <h4 class="price">
                    @GetSelectedVariant()?.Price.ToString("c")
                </h4>
            } 
        </div>
    </div>
}
else
{
   <h4>Loading...</h4>
}
@code {
    private Product? product;
    private int currentTypeId = 1;
    [Parameter]
    public int Id { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        product = await productService.GetProductAsync(Id);
        if (product == null) return;
        if (product.Variants.Count > 0)
        {
            currentTypeId = product.Variants.First().ProductTypeId;
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }
}

